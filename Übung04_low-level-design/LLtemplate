\documentclass{book}

\usepackage[]{graphicx}
\usepackage[]{float}
\usepackage[]{hyperref} 

\title{Design Document}
\author{Jens Henninger \and Daniel Maier \and Paul Fink \and Florian Jennewein}
\date{\today}


\begin{document}
\frontmatter
\maketitle
\tableofcontents
\mainmatter
\part{Low-Level-Design}

\chapter{Introduction}
This design document describes the low-level-Design of the desired system 
"Sojabohne" through class- and sequence- diagrams and also includes the basic source code of the application. 
The whole document is based on the architectural design document: \url{"https://moodle.uni-mainz.de/pluginfile.php/33758/mod_resource/content/1/architectural_design.pdf"}

\chapter{The Client-side Application}
Because the Client server isn't implemented in java, there's no need for us to implement the client side of our application. So we focus on the server application.

\chapter{The Server Application}
\section{Complete View}
The main idea regarding our application is that all required tasks are handled with their own handler class, which is called through a specific request and handles it with the appropriate method. As you can see in the figure we grouped the handlers in data- and user-handlers and each handler is connected with the user-/datamanager which instances allow each handler to access the database(always via manager and via SPARQL). 
\section{Detail View}
\subsection{The Main Servlet}
\subsection{The User Section}
\subsection{The Data Section}
\section{Used Patterns}
For our application, we used the following patterns:
-Whole-Part: This pattern is very important to guarantee the required modularity, reusability and a clear seperation through the use of classes, which aggregate particular objects/services. The most obvious example for this pattern is the relationship between the MainServlet and handler classes.
-Master-Slave Pattern: Although we haven't a master with more than one slave in our application but we think you can call the relationship between handler and manager classes a kind of this pattern. This grants exchangeability and extensibility.
-Command-Processor: This pattern is used in every handler through the Java prebuild HttpServlet system(HttpServletRequest class etc.). That gives our application the maximum flexibility in request processing.
-Singleton: This pattern is for some kind of stability and safety because it prevents that there's more than one instance of a specific class, which is only needed once. An example where this are the manager classes

\section{Resulting Source Code}


\end{document}

%%% Local Variables:
%%% mode: latex
%%% TeX-master: t
%%% End:
